@model BeautyHub.Entities.Appointment

@using (Ajax.BeginForm("Create", "Appointments", new AjaxOptions { HttpMethod="post",OnSuccess="formSuccess",OnFailure="formFailure"}))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <span style="color:#F87F76;">@ViewBag.Error</span>

    <div class="row">
        <div class="col-xl-6 col-md-6 form-group mx-auto mb-xl-4 mb-lg-3">
            @Html.LabelFor(m => m.CategoryId, "Category", new { @class = "control-label " })<span id="required">*</span>
            <div class="inner-addon left-addon">
                <i class="far fa-tag"></i>
                @Html.DropDownList("CategoryId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-xl-6 col-md-6 form-group mx-auto mb-xl-4 mb-lg-3">
            @Html.LabelFor(m => m.ServiceId, "Service", new { @class = "control-label" })<span id="required">*</span>
            <div class="inner-addon left-addon">
                <i class="far fa-praying-hands"></i>
                @Html.DropDownList("ServiceId", null, htmlAttributes: new { @class = "form-control", required = "required" })
                @Html.ValidationMessageFor(model => model.ServiceId, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-xl-6 col-md-6 form-group mx-auto mb-xl-4 mb-lg-3">
            @Html.LabelFor(model => model.AppointmentDate, htmlAttributes: new { @class = "control-label" })<span id="required">*</span>
            <div class="inner-addon left-addon">
                <i class="far fa-calendar-alt"></i>
                @Html.TextBoxFor(model => model.AppointmentDate, "{0:yyyy-MM-dd}", new { @class = "form-control", @type = "date" })
                @Html.ValidationMessageFor(model => model.AppointmentDate, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-xl-6 col-md-6 form-group mx-auto mb-xl-4 mb-lg-3">
            @Html.LabelFor(model => model.ServiceTimeId, "Service Time", new { @class = "control-label" })<span id="required">*</span>
            <div class="inner-addon left-addon">
                <i class="far fa-clock"></i>
                @Html.DropDownList("ServiceTimeId", null, htmlAttributes: new { @class = "form-control", required = "required" })
                @Html.ValidationMessageFor(model => model.ServiceTimeId, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group mx-auto mb-xl-4 mb-lg-3">
        @Html.LabelFor(m => m.OfficeLocationId, "Office Location", new { @class = "control-label" })<span id="required">*</span>
        <div class="inner-addon left-addon">
            <i class="far fa-map-marker-alt"></i>
            @Html.DropDownList("OfficeLocationId", null, htmlAttributes: new { @class = "form-control", required = "required", id = "location-dropdown" })
            @Html.ValidationMessageFor(model => model.OfficeLocationId, "", new { @class = "text-danger" })
        </div>
    </div>

    if (!User.IsInRole("User"))
    {
        <fieldset class="mt-4 booking-user-info">
            <legend class="">Personal Info</legend>
            <div class="row">
                <div class="col-xl-6 col-md-6 form-group mx-auto mb-xl-4 mb-lg-3">
                    @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label" })<span id="required">*</span>
                    <div class="inner-addon left-addon">
                        <i class="far fa-user"></i>
                        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", @Value = ViewBag.FirstName } })
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-xl-6 col-md-6 form-group mx-auto mb-xl-4 mb-lg-3">
                    @Html.LabelFor(model => model.LastName, new { @class = "control-label" })<span id="required">*</span>
                    <div class="inner-addon left-addon">
                        <i class="far fa-user"></i>
                        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", @Value = ViewBag.LastName } })
                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-xl-6 col-md-6 form-group mx-auto mb-xl-4 mb-lg-3">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })
                    <div class="inner-addon left-addon">
                        <i class="far fa-envelope"></i>
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @Value = ViewBag.Email } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-xl-6 col-md-6 form-group mx-auto mb-xl-4 mb-lg-3">
                    @Html.LabelFor(model => model.PhoneNumber, new { @class = "control-label" })<span id="required">*</span>
                    <div class="inner-addon left-addon">
                        <i class="far fa-phone-alt"></i>
                        @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control", @Value = ViewBag.PhoneNumber }, required = "required" })
                        @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </fieldset>
    }

    <div class="form-group mx-auto mb-xl-4 mb-lg-3">
        @Html.LabelFor(m => m.Message, new { @class = "control-label" })
        <div class="">
            @Html.TextAreaFor(m => m.Message, new { @class = "form-control", @rows = "5" })
            @Html.ValidationMessageFor(model => model.Message, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group mx-auto mb-xl-4 mb-lg-3">
        <div class="">
            <button type="submit" value="Create" class="btn w-100 p-2" style="background:#F24968"><span class="text-white">Book Appointment</span></button>
        </div>
    </div>
}


<script src="~/Scripts/jquery-3.4.1.min.js"></script>
<script src="~/Scripts/bootstrap.js"></script>
<script src="~/Scripts/bootbox.js"></script>

<script>
    let categoryDropdown = $('#CategoryId');
    let serviceDropdown = $('#ServiceId');
    let serviceTimeDropdown = $('#ServiceTimeId');

    $(document).ready(function () {
        clearCategoryDropdown();
        clearServiceDropdown();
        clearServiceTimeDropdown();

        $("#AppointmentDate").val('');

        $(".booking-user-info").hide();
        serviceTimeDropdown.on("change", function () {
            $(".booking-user-info").slideDown();
        });
    });

    $(document.getElementById("CategoryId").addEventListener("change", function () {

        clearServiceDropdown();

        $.ajax({
            async: false,
            url: "/Appointments/GetServices/",
            type: "get",
            data: { categoryId: this.value },
            contentType: "application/json;charset=utf-8",
            dataType: "json",
            success: function (data) {
                console.log(data);
                $.each(data, function (key, entry) {
                    serviceDropdown.append($('<option></option>').attr('value', entry.Id).text(entry.Name));
                })
            },
            error: function (error) {
                console.log(error.status);
            }
        });
    }));

    $(document.getElementById("AppointmentDate").addEventListener("change", function () {

        clearServiceTimeDropdown();

        var today = new Date();
        var year = today.getFullYear();
        var month = today.getMonth() + 1;
        var day = today.getDate();
        if (month <= 9) {
            month = "0" + month;
        }
        if (day <= 9) {
            day = "0" + day;
        }
        var formatted = year + "-" + month + "-" + day;

        if (Date.parse(this.value) < Date.parse(formatted)) {
            $("#AppointmentDate").val('');
            bootbox.alert('Oops! You cannot select dates before today');
            return;
        }
        else {
            $.ajax({
                async: false,
                url: "/Appointments/GetServiceTimes/",
                type: "get",
                data: { AppointmentDate: this.value },
                contentType: "application/json;charset=utf-8",
                dataType: "json",
                success: function (data) {
                    console.log(data);
                    $.each(data, function (key, entry) {
                        serviceTimeDropdown.append($('<option></option>').attr('value', entry.Id).text(entry.TimeRange));
                    })
                },
                error: function (error) {
                    console.log(error.status);
                }
            });
        }
    }));

    function clearCategoryDropdown() {
        categoryDropdown.prepend('<option selected="true" disabled>Choose Category</option>');
        categoryDropdown.prop('selectedIndex', 0);
    }

    function clearServiceDropdown() {
        serviceDropdown.empty();
        serviceDropdown.append('<option selected="true" disabled>Choose Service</option>');
        serviceDropdown.prop('selectedIndex', 0);
    };

    function clearServiceTimeDropdown() {
        serviceTimeDropdown.empty();
        serviceTimeDropdown.append('<option selected="true" disabled>Choose Service Time</option>');
        serviceTimeDropdown.prop('selectedIndex', 0);
    };</script>