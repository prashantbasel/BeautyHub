@model BeautyHub.Models.RegisterViewModel
@{
    ViewBag.Title = "Register";
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title - My ASP.NET Application</title>
    <link href="~/Content/bootstrap.min.css" rel="stylesheet" />
    <link href="~/Content/bootstrap.css" rel="stylesheet" />
    <link href="~/Content/login.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://pro.fontawesome.com/releases/v5.10.0/css/all.css" integrity="sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p" crossorigin="anonymous" />

    <script>
        function enableButton() {
            document.getElementById("registerButton").disabled = false;
        }

        function disableButton() {
            document.getElementById("registerButton").disabled = true;
        }

        function checkPasswordStrength(password) {
            const strengthIndicator = document.getElementById("password-strength");
            let strength = 0;

            // Check password strength
            if (password.length >= 8) strength++;
            if (/[a-z]/.test(password)) strength++;
            if (/[A-Z]/.test(password)) strength++;
            if (/[0-9]/.test(password)) strength++;
            if (/[\W]/.test(password)) strength++;

            // Update the strength indicator based on the score
            if (password.length < 8) {
                strengthIndicator.innerText = "Too Short";
                strengthIndicator.style.color = "red";
            } else if (strength <= 1) {
                strengthIndicator.innerText = "Weak";
                strengthIndicator.style.color = "red";
            } else if (strength === 2) {
                strengthIndicator.innerText = "Fair";
                strengthIndicator.style.color = "orange";
            } else if (strength === 3) {
                strengthIndicator.innerText = "Good";
                strengthIndicator.style.color = "blue";
            } else if (strength >= 4) {
                strengthIndicator.innerText = "Strong";
                strengthIndicator.style.color = "green";
            }
        }

    </script>
</head>
<body>
    <div class="main-div">
        <div class="col-xl-6 col-lg-8 col-md-8 col-sm-8 col-12 mx-auto align-self-center px-xl-5 px-lg-4 px-md-4 px-sm-4 px-4 pt-xl-5 pt-lg-4 py-md-4 py-sm-4 py-4 pb-xl-4 pb-lg-3" id="register-form">
            <div class="align-self-center w-100">
                <div class="d-flex flex-row justify-content-between align-items-center mb-2">
                    <a href="/" style="text-decoration: none">
                        <div class="d-flex justify-content-center align-items-center btn mb-2" id="back-to-home-button">
                            <i class="fa fa-angle-left"></i>
                        </div>
                    </a>
                    <h4 class="text-center w-100 heading-text">Register</h4>
                    <div id="unnecessary"></div>
                </div>
                @using (Html.BeginForm("Register", "Account", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                {
                    @Html.AntiForgeryToken()
                    @*<h4>Create a new account.</h4>*@
                    @Html.ValidationSummary("", new { @class = "text-danger" })
                    <div class="row">
                        <div class="col-xl-6 col-md-6 form-group mx-auto mb-xl-4 mb-lg-3">
                            @Html.LabelFor(m => m.Email, new { @class = "control-label, font-weight-bold " })
                            <div class="inner-addon left-addon">
                                <i class="fa fa-envelope"></i>
                                @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-xl-6 col-md-6 form-group mx-auto mb-xl-4 mb-lg-3">
                            @Html.LabelFor(m => m.PhoneNumber, new { @class = "control-label, font-weight-bold " })
                            <div class="inner-addon left-addon">
                                <i class="fa fa-phone-alt"></i>
                                @Html.TextBoxFor(m => m.PhoneNumber, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-xl-6 col-md-6 form-group mx-auto mb-xl-4 mb-lg-3">
                            @Html.LabelFor(m => m.FirstName, new { @class = "control-label, font-weight-bold " })
                            <div class="inner-addon left-addon">
                                <i class="fa fa-user"></i>
                                @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-xl-6 col-md-6 form-group mx-auto mb-xl-4 mb-lg-3">
                            @Html.LabelFor(m => m.LastName, new { @class = "control-label, font-weight-bold " })
                            <div class="inner-addon left-addon">
                                <i class="fa fa-user"></i>
                                @Html.TextBoxFor(m => m.LastName, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-xl-6 col-md-6 form-group mx-auto mb-xl-4 mb-lg-3">
                            @Html.LabelFor(m => m.Password, new { @class = "control-label, font-weight-bold " })
                            <div class="inner-addon left-addon">
                                <i class="fa fa-key"></i>
                                @Html.PasswordFor(m => m.Password, new { @class = "form-control", @oninput = "checkPasswordStrength(this.value)" })
                                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                                <small id="password-strength" class="form-text mt-2 font-weight-bold"></small> <!-- Strength indicator -->
                            </div>
                        </div>
                        <div class="col-xl-6 col-md-6 form-group mx-auto mb-xl-4 mb-lg-3">
                            @Html.LabelFor(m => m.ConfirmPassword, new { @class = "control-label, font-weight-bold " })
                            <div class="inner-addon left-addon">
                                <i class="fa fa-key"></i>
                                @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    if (User.IsInRole("Admin"))
                    {
                        <div class="form-group mx-auto mb-xl-4 mb-lg-3">
                            @Html.LabelFor(m => m.UserRole, new { @class = "control-label, font-weight-bold " })
                            <div class="">
                                @Html.DropDownList("UserRole", (SelectList)ViewBag.Roles, "Select Role", new { @class = "form-control" })
                            </div>
                        </div>
                    }
                    <div class="form__row">
                        <script src="https://www.google.com/recaptcha/api.js" async defer></script>
                        <div class="form-group">
                            <div class="g-recaptcha"
                                 data-sitekey="6Ldwyr4qAAAAAGA2IrM0jR8RyLM05tXHhIS7zXcI"
                                 data-callback="enableButton"
                                 data-expired-callback="disableButton">
                            </div>
                        </div>
                    </div>

                    <div class="form-group mx-auto mb-xl-4 mb-lg-3">
                        <div class="">
                            <button type="submit" value="Log in" class="btn w-100 p-2" id="registerButton" style="background:#F87F76" disabled><span class="text-white">Register</span></button>
                        </div>
                    </div>

                    if (!User.IsInRole("Admin"))
                    {
                        <div class="text-center small">
                            Already have an account? @Html.ActionLink("Login", "Login", null, new { style = "text-decoration: none; color:#F87F76;" })
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</body>

@section Scripts {
    <script src="https://www.google.com/recaptcha/api.js" async defer></script>
    @Scripts.Render("~/bundles/jqueryval")
}
</html>




